"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FinancialDocumentV1 = void 0;
const document_1 = require("../document");
const fields_1 = require("../../fields");
const invoiceLineItem_1 = require("../invoice/invoiceLineItem");
/**
 * Financial Document.
 */
class FinancialDocumentV1 extends document_1.Document {
    constructor({ prediction, orientation = undefined, extras = undefined, inputSource = undefined, fullText = undefined, pageId = undefined, }) {
        super({
            inputSource: inputSource,
            pageId: pageId,
            orientation: orientation,
            fullText: fullText,
            extras: extras,
        });
        /** List of Reference numbers including PO number. */
        this.referenceNumbers = [];
        /** The payment information. */
        this.supplierPaymentDetails = [];
        /** The supplier company registration information. */
        this.supplierCompanyRegistrations = [];
        /** The company registration information for the customer. */
        this.customerCompanyRegistrations = [];
        /** The list of the taxes. */
        this.taxes = [];
        /** Line items details. */
        this.lineItems = [];
        this.locale = new fields_1.Locale({
            prediction: prediction.locale,
            valueKey: "language",
        });
        this.documentType = new fields_1.BaseField({
            prediction: prediction.document_type,
            valueKey: "value",
        });
        this.referenceNumbers = prediction.reference_numbers.map(function (prediction) {
            return new fields_1.TextField({
                prediction: prediction,
                pageId: pageId,
            });
        });
        this.totalAmount = new fields_1.Amount({
            prediction: prediction.total_amount,
            valueKey: "value",
            pageId: pageId,
        });
        this.totalTax = new fields_1.Amount({
            prediction: prediction.total_tax,
            valueKey: "value",
            pageId: pageId,
        });
        this.totalNet = new fields_1.Amount({
            prediction: prediction.total_net,
            valueKey: "value",
            pageId: pageId,
        });
        this.date = new fields_1.DateField({
            prediction: prediction.date,
            pageId,
        });
        this.dueDate = new fields_1.DateField({
            prediction: prediction.due_date,
            pageId: pageId,
        });
        this.invoiceNumber = new fields_1.TextField({
            prediction: prediction.invoice_number,
            pageId: pageId,
        });
        this.supplierName = new fields_1.TextField({
            prediction: prediction.supplier_name,
            pageId: pageId,
        });
        this.supplierAddress = new fields_1.TextField({
            prediction: prediction.supplier_address,
            pageId: pageId,
        });
        this.supplierCompanyRegistrations =
            prediction.supplier_company_registrations.map(function (prediction) {
                return new fields_1.CompanyRegistration({
                    prediction: prediction,
                    pageId: pageId,
                });
            });
        this.customerName = new fields_1.TextField({
            prediction: prediction.customer_name,
            pageId: pageId,
        });
        this.customerAddress = new fields_1.TextField({
            prediction: prediction.customer_address,
            pageId: pageId,
        });
        prediction.customer_company_registrations.map((prediction) => this.customerCompanyRegistrations.push(new fields_1.CompanyRegistration({
            prediction: prediction,
            pageId: pageId,
        })));
        prediction.supplier_payment_details.map((prediction) => this.supplierPaymentDetails.push(new fields_1.PaymentDetails({
            prediction: prediction,
            pageId: pageId,
        })));
        prediction.line_items.map((prediction) => this.lineItems.push(new invoiceLineItem_1.InvoiceLineItem({
            prediction: prediction,
        })));
        this.tip = new fields_1.Amount({
            prediction: prediction.tip,
            valueKey: "value",
            pageId: pageId,
        });
        this.category = new fields_1.TextField({
            prediction: prediction.category,
            pageId: pageId,
        });
        this.subCategory = new fields_1.TextField({
            prediction: prediction.subcategory,
            pageId: pageId,
        });
        this.time = new fields_1.TextField({
            prediction: prediction.time,
            pageId: pageId,
        });
        prediction.taxes.map((taxPrediction) => this.taxes.push(new fields_1.TaxField({
            prediction: taxPrediction,
            pageId: pageId,
            valueKey: "value",
            rateKey: "rate",
            codeKey: "code",
            baseKey: "base",
        })));
    }
    toString() {
        const taxes = this.taxes.map((item) => item.toString()).join("\n       ");
        const referenceNumbers = this.referenceNumbers
            .map((item) => item.toString())
            .join(", ");
        const paymentDetails = this.supplierPaymentDetails
            .map((item) => item.toString())
            .join("\n                 ");
        const customerCompanyRegistration = this.customerCompanyRegistrations
            .map((item) => item.toString())
            .join("; ");
        const supplierCompanyRegistration = this.supplierCompanyRegistrations
            .map((item) => item.toString())
            .join("; ");
        let lineItems = "";
        if (this.lineItems.length > 0) {
            lineItems =
                "\n  Code           | QTY    | Price   | Amount   | Tax (Rate)       | Description\n  ";
            lineItems += this.lineItems.map((item) => item.toString()).join("\n  ");
        }
        const outStr = `----- Financial Document V1 -----
Filename: ${this.filename}
Document type: ${this.documentType}
Category: ${this.category}
Subcategory: ${this.subCategory}
Locale: ${this.locale}
Invoice number: ${this.invoiceNumber}
Reference numbers: ${referenceNumbers}
Date: ${this.date}
Due date: ${this.dueDate}
Time: ${this.time}
Supplier name: ${this.supplierName}
Supplier address: ${this.supplierAddress}
Supplier company registrations: ${supplierCompanyRegistration}
Supplier payment details: ${paymentDetails}
Customer name: ${this.customerName}
Customer address: ${this.customerAddress}
Customer company registrations: ${customerCompanyRegistration}
Tip: ${this.tip}
Taxes: ${taxes}
Total tax: ${this.totalTax}
Total net: ${this.totalNet}
Total amount: ${this.totalAmount}
Line Items: ${lineItems}
----------------------
`;
        return FinancialDocumentV1.cleanOutString(outStr);
    }
}
exports.FinancialDocumentV1 = FinancialDocumentV1;
